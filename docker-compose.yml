version: '3.8'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=nicolasmertens@nmertens.be"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: hexagonal-tiles-db
    restart: unless-stopped
    env_file: .env.production
    environment:
      POSTGRES_DB: hexagonal_tiles
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "3065:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s 
      retries: 5
    networks:
      - app-network
 
  # Node.js Express Server
  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hexagonal-tiles-server
    restart: unless-stopped
    env_file: .env.production

    ports:
      - "3064:3064"
    volumes:
      # Mount HGT data directory
      - /mnt/HC_Volume_102059749/store-data/:/mnt/HC_Volume_102059749/store-data/
      # Mount public directory for generated files
      - ./public:/app/public
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      # HTTP Router
      - "traefik.http.routers.server.rule=Host(`dempi.nmertens.be`)"
      - "traefik.http.routers.server.entrypoints=web"
      - "traefik.http.routers.server.middlewares=redirect-to-https"
      # HTTPS Router
      - "traefik.http.routers.server-secure.rule=Host(`dempi.nmertens.be`)"
      - "traefik.http.routers.server-secure.entrypoints=websecure"
      - "traefik.http.routers.server-secure.tls=true"
      - "traefik.http.routers.server-secure.tls.certresolver=letsencrypt"
      # Service
      - "traefik.http.services.server.loadbalancer.server.port=3064"
      # Middleware for HTTPS redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    hostname: pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - 'PGADMIN_DEFAULT_EMAIL=nicolasmertens@nmertens.be'
      - 'PGADMIN_DEFAULT_PASSWORD=mA4M7k8N'
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks:
      - app-network
    ports:
      - "3066:80"
    labels:
      - "traefik.enable=true"
      # HTTP Router
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.nmertens.be`)"
      - "traefik.http.routers.pgadmin.entrypoints=web"
      - "traefik.http.routers.pgadmin.middlewares=redirect-to-https"
      # HTTPS Router
      - "traefik.http.routers.pgadmin-secure.rule=Host(`pgadmin.nmertens.be`)"
      - "traefik.http.routers.pgadmin-secure.entrypoints=websecure"
      - "traefik.http.routers.pgadmin-secure.tls=true"
      - "traefik.http.routers.pgadmin-secure.tls.certresolver=letsencrypt"
      # Service (pgAdmin runs on port 80 internally)
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"

volumes:
  postgres_data:
    driver: local
  pgadmin:
    driver: local
  traefik-certificates:
    driver: local

networks:
  app-network:
    driver: bridge
